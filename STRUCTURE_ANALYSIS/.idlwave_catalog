;;
;; IDLWAVE catalog for library sacha
;; Automatically Generated -- do not edit.
;; Created by idlwave_catalog on Thu Mar 16 13:01:45 2017
;;
(setq idlwave-library-catalog-libname "sacha")
(setq idlwave-library-catalog-routines
 '(("hmg_create_catalog" pro nil (lib "fractal_make_grid.pro" nil "sacha") "%s, file" (nil ("_extra") ("FRACTALDIMENSION") ("NSTARS")))
   ("hmg_write_acf_info_file" pro nil (lib "fractal_make_grid.pro" nil "sacha") "%s, dir" (nil))
   ("fractal_make_grid" pro nil (lib "fractal_make_grid.pro" nil "sacha") "%s" (nil ("_extra") ("execute") ("fractaldimension") ("help") ("nstars") ("Rootdir")))
   ("h2dmg_create_catalog" pro nil (lib "fractal2d_make_grid.pro" nil "sacha") "%s, file" (nil ("_extra") ("FRACTALDIMENSION") ("NSTARS")))
   ("h2dmg_write_acf_info_file" pro nil (lib "fractal2d_make_grid.pro" nil "sacha") "%s, dir" (nil))
   ("fractal2d_make_grid" pro nil (lib "fractal2d_make_grid.pro" nil "sacha") "%s" (nil ("_extra") ("execute") ("fractaldimension") ("help") ("nstars") ("Rootdir")))
   ("build_fractal_field" pro nil (lib "build_fractal_field.pro" nil "sacha") "%s" (nil ("_extra") ("specfile") ("tablefile")))
   ("mcmg_create_catalog" pro nil (lib "multicluster_make_grid.pro" nil "sacha") "%s, file" (nil ("C1_CORERADIUS") ("C1_GAMMA") ("C2_CORERADIUS") ("C2_GAMMA") ("FRACTION") ("NSTARS") ("SEPARATION")))
   ("mcmg_write_acf_info_file" pro nil (lib "multicluster_make_grid.pro" nil "sacha") "%s, dir" (nil))
   ("multicluster_make_grid" pro nil (lib "multicluster_make_grid.pro" nil "sacha") "%s" (nil ("c1_coreradius") ("c1_gamma") ("c2_coreradius") ("c2_gamma") ("coreradius") ("execute") ("fraction") ("gamma") ("help") ("nstars") ("Rootdir") ("separation")))
   ("GenerateFractal2D_subdivide" fun nil (lib "generatefractal2d.pro" nil "sacha") "Result = %s(Coord)" (nil ("Iter") ("LastIter") ("NDiv") ("Nran") ("PerturbationScale")))
   ("GenerateFractal2D" fun nil (lib "generatefractal2d.pro" nil "sacha") "Result = %s" (nil ("FinalNStars") ("FractalDimension") ("InfoHeader") ("NDiv") ("NIterations") ("NStars") ("PerturbationScale")))
   ("read_catalog" fun nil (lib "read_catalog.pro" nil "sacha") "Result = %s(dir)" (nil ("prefix")))
   ("viewfrac" pro nil (lib "viewfrac.pro" nil "sacha") "%s, file" (nil ("_extra")))
   ("hfmg_create_fractal_catalog" fun nil (lib "fractalfield_make_grid.pro" nil "sacha") "Result = %s" (nil ("_extra") ("fractaldimension") ("infoheader") ("nstars")))
   ("hfmg_create_catalog" pro nil (lib "fractalfield_make_grid.pro" nil "sacha") "%s, file" (nil ("_extra") ("FRACTALDIMENSION") ("FRACTION") ("NSTARS")))
   ("hfmg_write_acf_info_file" pro nil (lib "fractalfield_make_grid.pro" nil "sacha") "%s, dir" (nil))
   ("fractalfield_make_grid" pro nil (lib "fractalfield_make_grid.pro" nil "sacha") "%s" (nil ("_extra") ("execute") ("fractaldimension") ("fraction") ("help") ("nstars") ("Rootdir")))
   ("populate_probability_map" fun nil (lib "populate_probability_map.pro" nil "sacha") "Result = %s(pmap_in)" (nil ("catalog") ("nstars")))
   ("pl_acf" pro nil (lib "pl_acf.pro" nil "sacha") "%s, dir" (nil ("_extra") ("show_ngc")))
   ("dg_make_absolute_path" fun nil (lib "display_grid.pro" nil "sacha") "Result = %s(path, prefix)" (nil))
   ("dg_match_strings" fun nil (lib "display_grid.pro" nil "sacha") "Result = %s(sLong, sFind)" (nil))
   ("dg_values_from_param" fun nil (lib "display_grid.pro" nil "sacha") "Result = %s(allparams, allvalues, param)" (nil ("numeric")))
   ("dg_parse_file" pro nil (lib "display_grid.pro" nil "sacha") "%s, alllines" (nil ("models") ("params") ("paths") ("readlines") ("status") ("uniq_params") ("values")))
   ("display_grid_model_Event" pro nil (lib "display_grid.pro" nil "sacha") "%s, sEvent" (nil))
   ("display_grid" fun nil (lib "display_grid.pro" nil "sacha") "Result = %s(filename)" (nil ("no_block")))
   ("display_grid" pro nil (lib "display_grid.pro" nil "sacha") "%s, filename" (nil ("no_block")))
   ("pl_catalog" pro nil (lib "pl_catalog.pro" nil "sacha") "%s, dir" (nil ("_extra")))
   ("chmg_create_fractal_catalog" fun nil (lib "clusterfractal_make_grid.pro" nil "sacha") "Result = %s" (nil ("_extra") ("fractaldimension") ("infoheader") ("nstars")))
   ("chmg_create_catalog" pro nil (lib "clusterfractal_make_grid.pro" nil "sacha") "%s, file" (nil ("_extra") ("CORERADIUS") ("FRACTALDIMENSION") ("FRACTION") ("GAMMA") ("NSTARS")))
   ("chmg_write_acf_info_file" pro nil (lib "clusterfractal_make_grid.pro" nil "sacha") "%s, dir" (nil))
   ("clusterfractal_make_grid" pro nil (lib "clusterfractal_make_grid.pro" nil "sacha") "%s" (nil ("_extra") ("coreradius") ("execute") ("fractaldimension") ("fraction") ("gamma") ("help") ("nstars") ("Rootdir")))
   ("GenerateFractal3D_subvolume_with_Nstars" fun nil (lib "generatefractal3d.pro" nil "sacha") "Result = %s(coords_in, nstars_in)" (nil))
   ("GenerateFractal3D_subdivide" fun nil (lib "generatefractal3d.pro" nil "sacha") "Result = %s(Coord)" (nil ("Iter") ("LastIter") ("NDiv") ("Nran") ("PerturbationScale")))
   ("GenerateFractal3D" fun nil (lib "generatefractal3d.pro" nil "sacha") "Result = %s" (nil ("FinalNStars") ("FractalDimension") ("InfoHeader") ("NDiv") ("NIterations") ("NStars") ("PerturbationScale")))
   ("create_catalog_spl" pro nil (lib "create_catalog_spl.pro" nil "sacha") "%s, file" (nil ("ALPHA") ("NSTARS")))
   ("build_fractal_cluster_nearest_neighbor" fun nil (lib "build_fractal_cluster.pro" nil "sacha") "Result = %s(x, y)" (nil))
   ("build_fractal_cluster" pro nil (lib "build_fractal_cluster.pro" nil "sacha") "%s" (nil ("_extra") ("specfile") ("tablefile")))
   ("create_catalog_eff" pro nil (lib "create_catalog_eff.pro" nil "sacha") "%s, file" (nil ("CORERADIUS") ("GAMMA") ("NSTARS")))
   ("fit_broken_powerlaw_model" fun nil (lib "fit_broken_powerlaw.pro" nil "sacha") "Result = %s(par)" (nil))
   ("fit_broken_powerlaw_deviation" fun nil (lib "fit_broken_powerlaw.pro" nil "sacha") "Result = %s(par)" (nil))
   ("fit_broken_powerlaw" fun nil (lib "fit_broken_powerlaw.pro" nil "sacha") "Result = %s(x, y, dy)" (nil ("initial_par") ("initial_scale") ("xmax") ("xmin") ("ymodel")))
   ("tpcf_stars_exact_get_simulation_type" fun nil (lib "tpcf_stars_exact.pro" nil "sacha") "Result = %s(instr)" (nil))
   ("tpcf_stars_exact_get_simulation_keyword" fun nil (lib "tpcf_stars_exact.pro" nil "sacha") "Result = %s(instr, inkeyword)" (nil ("default")))
   ("tpcf_stars_exact" fun nil (lib "tpcf_stars_exact.pro" nil "sacha") "Result = %s" (nil ("annuli_max") ("annuli_min") ("annulistep") ("box") ("dolog") ("fov_polygon") ("imagesub") ("imagetitle") ("infofile") ("mask_map") ("mask_pixelsize") ("nannuli") ("outputfile") ("psfile") ("simulation") ("usemasking")))
   ("cfmg_create_catalog" pro nil (lib "clusterfield_make_grid.pro" nil "sacha") "%s, file" (nil ("CORERADIUS") ("FRACTION") ("GAMMA") ("NSTARS")))
   ("cfmg_write_acf_info_file" pro nil (lib "clusterfield_make_grid.pro" nil "sacha") "%s, dir" (nil))
   ("clusterfield_make_grid" pro nil (lib "clusterfield_make_grid.pro" nil "sacha") "%s" (nil ("coreradius") ("execute") ("fraction") ("gamma") ("help") ("nstars") ("Rootdir")))
   ("do_acf" pro nil (lib "do_acf.pro" nil "sacha") "%s, info_file" (nil ("_extra") ("npixels")))
   ("calc_acf" pro nil (lib "calc_acf.pro" nil "sacha") "%s, dir" (nil ("_extra") ("prefix")))
   ("cmg_create_catalog" pro nil (lib "cluster_make_grid.pro" nil "sacha") "%s, file" (nil ("CORERADIUS") ("GAMMA") ("NSTARS")))
   ("cmg_write_acf_info_file" pro nil (lib "cluster_make_grid.pro" nil "sacha") "%s, dir" (nil))
   ("cluster_make_grid" pro nil (lib "cluster_make_grid.pro" nil "sacha") "%s" (nil ("coreradius") ("execute") ("gamma") ("help") ("nstars") ("Rootdir")))
   ("read_acf" fun nil (lib "read_acf.pro" nil "sacha") "Result = %s(dir)" (nil ("prefix")))))
