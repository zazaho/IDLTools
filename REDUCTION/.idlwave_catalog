;;
;; IDLWAVE catalog for library sacha
;; Automatically Generated -- do not edit.
;; Created by idlwave_catalog on Thu Mar 16 13:01:45 2017
;;
(setq idlwave-library-catalog-libname "sacha")
(setq idlwave-library-catalog-routines
 '(("fix3e" fun nil (lib "fix3e.pro" nil "sacha") "Result = %s(in)" (nil))
   ("rampclip" fun nil (lib "rampclip.pro" nil "sacha") "Result = %s(spd0)" (nil ("minimum")))
   ("maxtint" fun nil (lib "maxtint.pro" nil "sacha") "Result = %s(a)" (nil))
   ("sh_whichband" fun nil (lib "sh_whichband.pro" nil "sacha") "Result = %s(a)" (nil ("linedata") ("num")))
   ("sh_do_fit" fun nil (lib "sh_dark.pro" nil "sacha") "Result = %s(x, y, num)" (nil ("fit_method")))
   ("sh_apply_all" pro nil (lib "sh_dark.pro" nil "sacha") "%s, adet, kappa, firstx" (nil))
   ("sh_init_mea" pro nil (lib "sh_dark.pro" nil "sacha") "%s, sctbl" (nil))
   ("sh_reset_mea" pro nil (lib "sh_dark.pro" nil "sacha") "%s" (nil))
   ("sh_dark_do_for_all" pro nil (lib "sh_dark.pro" nil "sacha") "%s" (nil ("do_scans")))
   ("SH_DARK" fun nil (lib "sh_dark.pro" nil "sacha") "Result = %s(spd)" (nil ("params") ("sctbl")))
   ("sh_convgg" fun nil (lib "sh_convgg.pro" nil "sacha") "Result = %s" (nil ("help") ("lambda") ("nlambda") ("nwidth") ("plot") ("rp") ("wrange") ("xrange")))
   ("sh_memcor" fun nil (lib "sh_memcor.pro" nil "sacha") "Result = %s(ain)" (nil ("order") ("resol") ("sigma")))
   ("sh_snr" fun nil (lib "sh_snr.pro" nil "sacha") "Result = %s(aar)" (nil ("_EXTRA") ("NDEGREE") ("XRANGE")))
   ("fm_opelkaar" fun nil (lib "fm_opelkaar.pro" nil "sacha") "Result = %s(aar)" (nil ("apply") ("band") ("noprint")))
   ("get_aotband" fun nil (lib "get_aotband.pro" nil "sacha") "Result = %s(a, bnd)" (nil ("band") ("test")))
   ("verify_cal02" fun nil (lib "verify_cal02.pro" nil "sacha") "Result = %s(c)" (nil))
   ("ql_updown" pro nil (lib "ql_updown.pro" nil "sacha") "%s, a, rsol" (nil))
   ("fix2a" fun nil (lib "fix2a.pro" nil "sacha") "Result = %s(in)" (nil ("_extra")))
   ("selbands" fun nil (lib "selbands.pro" nil "sacha") "Result = %s(aar, bands)" (nil ("COUNT") ("REMOVE")))
   ("sh_res" fun nil (lib "sh_res.pro" nil "sacha") "Result = %s(lambda, bnd)" (nil ("_extra") ("BAND") ("ngc7027") ("recalc")))
   ("sh_show_variance" pro nil (lib "sh_show_variance.pro" nil "sacha") "%s, n" (nil ("band")))
   ("verify_cal02b" fun nil (lib "verify_cal02b.pro" nil "sacha") "Result = %s(c)" (nil))
   ("sh_band" fun nil (lib "sh_band.pro" nil "sacha") "Result = %s(a, bnd)" (nil ("band") ("test")))
   ("sh_def_ffmethod" fun nil (lib "sh_def_ffmethod.pro" nil "sacha") "Result = %s(a)" (nil))
   ("fix2b" fun nil (lib "fix2b.pro" nil "sacha") "Result = %s(in)" (nil ("_extra")))
   ("sh_update_vel_info" pro nil (lib "sh_update_vel_info.pro" nil "sacha") "%s, newspd, oldspd" (nil))
   ("rampclipline" fun nil (lib "rampclipline.pro" nil "sacha") "Result = %s(spd0)" (nil))
   ("sc" fun nil (lib "sc.pro" nil "sacha") "Result = %s(inaar, insig, inniter)" (nil ("_extra") ("chauvenet")))
   ("timeaver" pro nil (lib "timeaver.pro" nil "sacha") "%s, in" (nil ("_extra")))
   ("fix2c" fun nil (lib "fix2c.pro" nil "sacha") "Result = %s(in)" (nil ("_extra")))
   ("sh_fix_overlap" fun nil (lib "sh_fix_overlap.pro" nil "sacha") "Result = %s(r1, r2)" (nil))
   ("indband" fun nil (lib "indband.pro" nil "sacha") "Result = %s(aar, band)" (nil ("COUNT")))
   ("sh_deconvgg" fun nil (lib "sh_deconvgg.pro" nil "sacha") "Result = %s(lambda, WObs, bnd)" (nil ("_extra") ("band") ("gausparam") ("ngc7027") ("Werr")))
   ("getscan" fun nil (lib "getscan.pro" nil "sacha") "Result = %s(structin)" (nil ("down") ("up")))
   ("reb" fun nil (lib "reb.pro" nil "sacha") "Result = %s(inaar, inres)" (nil ("_extra") ("md") ("mean") ("median") ("mn") ("ref") ("wmean")))
   ("sh_has_aotband" fun nil (lib "sh_has_aotband.pro" nil "sacha") "Result = %s(structin, aotband)" (nil))
   ("darkclip" fun nil (lib "darkclip.pro" nil "sacha") "Result = %s(in_spd)" (nil ("range")))
   ("sh_updown" pro nil (lib "sh_updown.pro" nil "sacha") "%s, p1, p2" (nil ("_extra") ("down") ("up")))
   ("ff" fun nil (lib "ff.pro" nil "sacha") "Result = %s(in, ord)" (nil ("_extra") ("method") ("offset") ("scaling")))
   ("my_flatfield" fun nil (lib "sh_doit.pro" nil "sacha") "Result = %s(a, o)" (nil ("_extra") ("scaling")))
   ("sh_doit" fun nil (lib "sh_doit.pro" nil "sacha") "Result = %s(aar, aband)" (nil ("ffordr") ("method") ("resol") ("scaling") ("sigma") ("weight")))
   ("block_itk" fun nil (lib "block_itk.pro" nil "sacha") "Result = %s(spdin)" (nil ("itk") ("range")))
   ("dynadaar" fun nil (lib "dynadaar.pro" nil "sacha") "Result = %s(spd_in)" (nil ("noclean")))))
