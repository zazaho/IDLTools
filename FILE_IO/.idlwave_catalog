;;
;; IDLWAVE catalog for library sacha
;; Automatically Generated -- do not edit.
;; Created by idlwave_catalog on Thu Mar 16 13:01:45 2017
;;
(setq idlwave-library-catalog-libname "sacha")
(setq idlwave-library-catalog-routines
 '(("sh_getresp2" fun nil (lib "sh_getresp2.pro" nil "sacha") "Result = %s(band)" (nil))
   ("sh_getresp" fun nil (lib "sh_getresp.pro" nil "sacha") "Result = %s(band)" (nil ("det") ("ref")))
   ("rfile" pro nil (lib "rfile.pro" nil "sacha") "%s, file, out, str" (nil ("arrstr") ("edum") ("path")))
   ("expand_string" fun nil (lib "expand_string.pro" nil "sacha") "Result = %s(str)" (nil ("_extra")))
   ("plspectra" pro nil (lib "read_spectra.pro" nil "sacha") "%s, in" (nil ("_extra") ("data") ("modust") ("sws") ("unred")))
   ("read_spectra_match_data" fun nil (lib "read_spectra.pro" nil "sacha") "Result = %s(model, data)" (nil ("mrange")))
   ("read_spectra_datatable" fun nil (lib "read_spectra.pro" nil "sacha") "Result = %s" (nil ("prefix") ("status")))
   ("read_spectra_data" fun nil (lib "read_spectra.pro" nil "sacha") "Result = %s(starname, StarTable)" (nil ("prefix")))
   ("read_spectra_from_path" fun nil (lib "read_spectra.pro" nil "sacha") "Result = %s(readlines, path)" (nil ("prefix")))
   ("read_spectra_match_strings" fun nil (lib "read_spectra.pro" nil "sacha") "Result = %s(sLong, sFind)" (nil))
   ("read_spectra_values_from_param" fun nil (lib "read_spectra.pro" nil "sacha") "Result = %s(allparams, allvalues, param)" (nil ("numeric")))
   ("read_spectra_read_batch" fun nil (lib "read_spectra.pro" nil "sacha") "Result = %s(filename)" (nil))
   ("read_spectra_parse_file" pro nil (lib "read_spectra.pro" nil "sacha") "%s, alllines" (nil ("command") ("models") ("params") ("paths") ("readlines") ("separator") ("uniq_params") ("values")))
   ("read_spectra_Event" pro nil (lib "read_spectra.pro" nil "sacha") "%s, sEvent" (nil))
   ("read_spectra" fun nil (lib "read_spectra.pro" nil "sacha") "Result = %s(filename)" (nil ("command") ("mrange") ("no_block") ("plotwindow") ("prefix") ("separator")))
   ("ines2aar" fun nil (lib "ines2aar.pro" nil "sacha") "Result = %s(inines)" (nil))
   ("sh_aar2ascii" pro nil (lib "sh_aar2ascii.pro" nil "sacha") "%s, p1, p2" (nil ("back") ("error") ("flux") ("format") ("head") ("help") ("maxi") ("wave")))
   ("read_firs" fun nil (lib "read_firs.pro" nil "sacha") "Result = %s(fname)" (nil))
   ("write_fdat" pro nil (lib "write_fdat.pro" nil "sacha") "%s, a, file" (nil ("_extra") ("comment") ("filename") ("head") ("ncol") ("sort")))
   ("writedata" pro nil (lib "writedata.pro" nil "sacha") "%s, filename, data, header, units, cfact, mcode" (nil ("comments") ("delim") ("no_warn") ("title")))
   ("getsource" pro nil (lib "getsource.pro" nil "sacha") "%s, name, list" (nil ("out")))
   ("read_fmidas" fun nil (lib "read_fmidas.pro" nil "sacha") "Result = %s(fname)" (nil ("_extra") ("help") ("table")))
   ("read_red" fun nil (lib "read_red.pro" nil "sacha") "Result = %s(query_in, dbase)" (nil ("combined") ("database") ("help") ("lrs") ("nosimbad") ("photometry") ("ssp")))
   ("read_flrs" fun nil (lib "read_flrs.pro" nil "sacha") "Result = %s(fname_in)" (nil ("makehead") ("nocorrection") ("noprint") ("pad")))
   ("getlws" fun nil (lib "getlws.pro" nil "sacha") "Result = %s(fn)" (nil ("_extra") ("lwsdir")))
   ("read_flws" fun nil (lib "read_flws.pro" nil "sacha") "Result = %s(fname)" (nil))
   ("read_fmidfits" fun nil (lib "read_fmidfits.pro" nil "sacha") "Result = %s(fname)" (nil))
   ("readfits_safe" fun nil (lib "readfits_safe.pro" nil "sacha") "Result = %s(filename, header, heap)" (nil ("_extra")))
   ("readmipssed" fun nil (lib "readmipssed.pro" nil "sacha") "Result = %s(file)" (nil))
   ("read_flsan" fun nil (lib "read_flsan.pro" nil "sacha") "Result = %s(fname)" (nil))
   ("sh_read_check_file" fun nil (lib "sh_read.pro" nil "sacha") "Result = %s(files, paths)" (nil ("status")))
   ("gzip" pro nil (lib "sh_read.pro" nil "sacha") "%s, arg" (nil))
   ("gunzip" pro nil (lib "sh_read.pro" nil "sacha") "%s, arg" (nil))
   ("sh_read" fun nil (lib "sh_read.pro" nil "sacha") "Result = %s(filein)" (nil ("_extra") ("aar") ("dat") ("erd") ("fits") ("found") ("lsp") ("lws") ("spd") ("ssp") ("type")))
   ("read_fdat" fun nil (lib "read_fdat.pro" nil "sacha") "Result = %s(fname_in)" (nil ("_extra") ("comment") ("help") ("skip") ("sort") ("tabel")))
   ("use_readdata" pro nil (lib "readdata.pro" nil "sacha") "%s" (nil))
   ("readdata" pro nil (lib "readdata.pro" nil "sacha") "%s, fname, DATA, NAMES, NCOL, NDAT" (nil ("autoskip") ("cols") ("comments") ("delim") ("lines") ("maxcomments") ("nodata") ("noheader") ("quiet") ("skip") ("skp1") ("skp2") ("transpose")))
   ("display_spectra" pro nil (lib "display_spectra.pro" nil "sacha") "%s, filename" (nil ("_extra")))
   ("read_irsdir" fun nil (lib "read_irsdir.pro" nil "sacha") "Result = %s(dirname)" (nil))
   ("sh_writelines" pro nil (lib "sh_writelines.pro" nil "sacha") "%s, data, filenaam" (nil))))
