;;
;; IDLWAVE catalog for library sacha
;; Automatically Generated -- do not edit.
;; Created by idlwave_catalog on Thu Mar 16 13:01:45 2017
;;
(setq idlwave-library-catalog-libname "sacha")
(setq idlwave-library-catalog-routines
 '(("baseline_scan" pro nil (lib "baseline_scan.pro" nil "sacha") "%s, cube, cube_mask_init, cube_corrige, rms_noise" (nil))
   ("pW2Jy" pro nil (lib "pw2jy.pro" nil "sacha") "%s, donnees, donnees_Jy" (nil ("Conv") ("tau")))
   ("clean_chaine" fun nil (lib "readfitsapex2007.pro" nil "sacha") "Result = %s(chaine, car1, car2)" (nil))
   ("header2string" fun nil (lib "readfitsapex2007.pro" nil "sacha") "Result = %s(commande, param_liste, header)" (nil))
   ("readfits_apex" fun nil (lib "readfitsapex2007.pro" nil "sacha") "Result = %s(scan_number, subscan)" (nil ("calibration_camera") ("goodpix_ima") ("nopowermap")))
   ("madpartemiswrap" pro nil (lib "madpartemiswrap.pro" nil "sacha") "%s" (nil ("rsamp") ("scan_number")))
   ("set_pos_dec_cte" pro nil (lib "set_pos_dec_cte.pro" nil "sacha") "%s, datastr, echant, positions, out_ima_dim" (nil))
   ("circav_ima" fun nil (lib "circav_ima.pro" nil "sacha") "Result = %s(image)" (nil ("radprof") ("xref") ("yref")))
   ("header2struct" fun nil (lib "header2struct.pro" nil "sacha") "Result = %s(header, parametres)" (nil))
   ("check_data_partemis" fun nil (lib "check_data_partemis.pro" nil "sacha") "Result = %s(datastr)" (nil))
   ("map_make" pro nil (lib "map_make_direct.pro" nil "sacha") "%s, mapradecstr" (nil ("carte_scan") ("champ1") ("donnees") ("error_otf_scan") ("offset_str") ("parang0") ("project") ("removedrift") ("scan_list")))
   ("locate_dual_beam" fun nil (lib "locate_dual_beam.pro" nil "sacha") "Result = %s(scan_str, masque_base_str)" (nil))
   ("filter_spiral" pro nil (lib "filter_spiral.pro" nil "sacha") "%s, donnees, donnees_filtered, rms_noise, rms_noise_filtered" (nil ("spiral_freq")))
   ("atv_weight" pro nil (lib "atv_weight.pro" nil "sacha") "%s, mapradecstr" (nil ("frac_weight")))
   ("skydip_fun" fun nil (lib "skydip_fun.pro" nil "sacha") "Result = %s(X, APAR)" (nil))
   ("parallactic_angle" fun nil (lib "parallactic_angle.pro" nil "sacha") "Result = %s(ha, delta)" (nil ("site_lat")))
   ("traite_otf_map_main" pro nil (lib "traite_otf_map_main.pro" nil "sacha") "%s, mapradecstr" (nil ("champ_base") ("champ_masque") ("dir_dat") ("do_rcp") ("flat") ("med_base") ("med_noise_rem") ("model") ("newreduc") ("nopowermap") ("project") ("rmode") ("scan_number") ("tau") ("type")))
   ("noise_fft_cal" pro nil (lib "noise_fft_cal.pro" nil "sacha") "%s, cal_number, goodpix_ima, noise_str" (nil ("amb_cold") ("dir_dat")))
   ("shift_and_add" fun nil (lib "shift_and_add.pro" nil "sacha") "Result = %s(diff)" (nil))
   ("ekh_restore" fun nil (lib "ekh_restore.pro" nil "sacha") "Result = %s(diff)" (nil))
   ("extract_beam" pro nil (lib "extract_beam.pro" nil "sacha") "%s, cube, chop_pos, cubepos, cubeneg" (nil ("count")))
   ("corr_ext" pro nil (lib "corr_ext.pro" nil "sacha") "%s, donnees, donnees_cor" (nil ("tau")))
   ("set_pos_" pro nil (lib "set_pos_.pro" nil "sacha") "%s, datastr, positions, out_ima_dim" (nil ("do_rcp") ("echant")))
   ("traite_otf_scan" pro nil (lib "traite_otf_scan.pro" nil "sacha") "%s, donnees, masque_base_str, donnees_red, rms_noise" (nil ("conv") ("error") ("masque_model") ("med_base") ("med_noise_rem") ("model") ("rest")))
   ("madpartemis_format_cube" fun nil (lib "madpartemis_format_cube.pro" nil "sacha") "Result = %s(cube, goodpix_ima, rsamp)" (nil))
   ("read_apex" fun nil (lib "read_apex.pro" nil "sacha") "Result = %s(scan_number, subscan, filetype)" (nil ("calibration_camera") ("goodpix_ima") ("nopowermap")))
   ("map_make_ch" pro nil (lib "map_make_ch.pro" nil "sacha") "%s, cube_ch_map_str" (nil ("carte_scan") ("champ1") ("donnees2") ("donnees_red") ("init_obs_str") ("parang0") ("project")))
   ("gauss2D_fit" pro nil (lib "gauss2D_fit.pro" nil "sacha") "%s, mapradecstr, map_gaussfit_aparm" (nil))
   ("grid_kernel" fun nil (lib "grid_kernel.pro" nil "sacha") "Result = %s(radius)" (nil))
   ("locate_signal" fun nil (lib "locate_signal.pro" nil "sacha") "Result = %s(scan_str, masque_base_str)" (nil))
   ("OS_FAMILY" fun nil (lib "os_family.pro" nil "sacha") "Result = %s" (nil ("LOWER")))
   ("clean_chaine" fun nil (lib "readfits_apex.pro" nil "sacha") "Result = %s(chaine, car1, car2)" (nil))
   ("header2string" fun nil (lib "readfits_apex.pro" nil "sacha") "Result = %s(commande, param_liste, header)" (nil))
   ("readfits_apex" fun nil (lib "readfits_apex.pro" nil "sacha") "Result = %s(scan_number, subscan)" (nil ("calibration_camera") ("goodpix_ima") ("nopowermap")))
   ("traite_nodding_apex_derot" pro nil (lib "traite_nodding_apex_derot.pro" nil "sacha") "%s, scan_list, image, rms, cube_nodding, nodding" (nil ("decorrel") ("image_nod") ("kill50Hz") ("mean_lst") ("nofilt") ("pwv") ("scan_ini") ("tau")))
   ("DEF_DIRLIST" pro nil (lib "def_dirlist.pro" nil "sacha") "%s, EVAR, VALUE" (nil))
   ("power_map_apex_bolero" pro nil (lib "power_map_apex_bolero.pro" nil "sacha") "%s, vhblind, bias, vl, imagein, imageout" (nil))
   ("median_decorrel_scan" pro nil (lib "median_decorrel_scan.pro" nil "sacha") "%s, donnees, donnees_corrigees, correl_matrice" (nil ("cube_masque")))
   ("get_calibration_camera" pro nil (lib "get_calibration_camera.pro" nil "sacha") "%s, calibration_file" (nil ("obs1_config")))
   ("noise_fft_skydip" pro nil (lib "noise_fft_skydip.pro" nil "sacha") "%s, skydip_number, noise_str" (nil ("nopowermap")))
   ("raw2chopbeam_apex" fun nil (lib "raw2chopbeam_apex.pro" nil "sacha") "Result = %s(value, chopamp)" (nil))
   ("extract_substring" fun nil (lib "build_apexobslog.pro" nil "sacha") "Result = %s(value, param1, param2, off1, off2)" (nil))
   ("extract_calibratelog" pro nil (lib "build_apexobslog.pro" nil "sacha") "%s, value, calibrate_struct" (nil))
   ("extract_maplog" pro nil (lib "build_apexobslog.pro" nil "sacha") "%s, value, map_struct" (nil))
   ("extract_onlog" pro nil (lib "build_apexobslog.pro" nil "sacha") "%s, value, on_struct" (nil))
   ("extract_skydiplog" pro nil (lib "build_apexobslog.pro" nil "sacha") "%s, value, skydip_struct" (nil))
   ("extract_champ" pro nil (lib "build_apexobslog.pro" nil "sacha") "%s, chaine, champ, value" (nil))
   ("get_champ_string" pro nil (lib "build_apexobslog.pro" nil "sacha") "%s, champ_string" (nil))
   ("init_logstructure" pro nil (lib "build_apexobslog.pro" nil "sacha") "%s, struct" (nil))
   ("build_apexobslog" pro nil (lib "build_apexobslog.pro" nil "sacha") "%s, tab_struct" (nil ("savefilename")))
   ("filter_spiral" pro nil (lib "filter_spiral_zero.pro" nil "sacha") "%s, donnees, donnees_filtered, rms_noise, rms_noise_filtered" (nil ("spiral_freq")))
   ("noise_fft_pro" pro nil (lib "noise_fft_pro.pro" nil "sacha") "%s, donnees, goodpix_ima, mean_level, mean_level_av, rms_noise, rms_noise_av, cube_pow_spec, pow_spec_av" (nil ("ndim") ("sub_mean")))
   ("CONV_ekh1dim_kosma" fun nil (lib "conv_ekh1dim_kosma.pro" nil "sacha") "Result = %s(Signal_1dim, CFUN, DNORM, naz)" (nil))
   ("rcp_fun" pro nil (lib "rcp_fun.pro" nil "sacha") "%s, X, APAR, Funct, PDER" (nil))
   ("read_apexobslog" fun nil (lib "read_apexobslog.pro" nil "sacha") "Result = %s(scannumber)" (nil ("all")))
   ("create_champ" pro nil (lib "create_champ.pro" nil "sacha") "%s, parang0, champ" (nil ("carte_scan") ("donnees") ("error_scan") ("i") ("subscan_liste") ("subscan_name") ("type")))
   ("traite_otf_map_model" pro nil (lib "traite_otf_map_model.pro" nil "sacha") "%s, mapradecstr" (nil ("champ_base") ("champ_masque") ("do_rcp") ("med_base") ("med_noise_rem") ("model") ("project") ("rmode") ("rms_corr") ("rms_uncorr") ("scan_number") ("type")))
   ("dlst2dtloc" fun nil (lib "dlst2dtloc.pro" nil "sacha") "Result = %s(dlst)" (nil))
   ("gildas" pro nil (lib "gildas.pro" nil "sacha") "%s, name, data, ax1, ax2, ax3, ax4" (nil ("header") ("show") ("write")))
   ("decorrel_scan" pro nil (lib "decorrel_scan.pro" nil "sacha") "%s, donnees, cube_mask_init, donnees_corrigees, correl_matrice" (nil))
   ("traite_nodding_apex_div" pro nil (lib "traite_nodding_apex_div.pro" nil "sacha") "%s, scan_list, n_cyc4, image, rms, cube_image, cube_rms" (nil ("decorrel") ("mean_lst") ("pwv") ("scan_list_group") ("tau")))
   ("median_decorrel_row" pro nil (lib "median_decorrel_row.pro" nil "sacha") "%s, donnees, donnees_corrigees, correl_matrice" (nil ("cube_masque")))
   ("med_baseline_scan" pro nil (lib "med_baseline_scan.pro" nil "sacha") "%s, cube, cube_corrige, rms_noise" (nil ("cube_masque")))
   ("struct_expand" pro nil (lib "struct_expand.pro" nil "sacha") "%s, struct_val, param_name, param_val, structout" (nil ("pos")))
   ("test_decorrel" pro nil (lib "test_decorrel.pro" nil "sacha") "%s, cube, mask, cube_corrige, correl_matrice, a_matrice" (nil))
   ("mean_baseline_scan" pro nil (lib "mean_baseline_scan.pro" nil "sacha") "%s, cube, cube_corrige, rms_noise" (nil ("cube_masque")))
   ("kill_high" pro nil (lib "kill_high.pro" nil "sacha") "%s, donnees, donnees_high, rms_noise, rms_noise_high" (nil))
   ("do_map_scan" pro nil (lib "do_map_scan.pro" nil "sacha") "%s, datastr, positions, map_out_dim, carte_scan" (nil ("do_rcp") ("dx_rcp") ("dy_rcp") ("echant")))
   ("set_pos_elev_cte" pro nil (lib "set_pos_elev_cte.pro" nil "sacha") "%s, datastr, echant, positions, out_ima_dim" (nil))
   ("extract_ima_moy" fun nil (lib "extract_ima_moy.pro" nil "sacha") "Result = %s(cube, ima_rms)" (nil ("clip") ("cube_rms") ("rms_weight")))
   ("asso_images_2007" pro nil (lib "asso_images_2007.pro" nil "sacha") "%s, donnees, diff_asso, error" (nil))
   ("make_fits" pro nil (lib "make_fits.pro" nil "sacha") "%s, map_radec_str" (nil ("dir") ("fileout") ("xy")))
   ("kill_50Hz" pro nil (lib "kill_50hz.pro" nil "sacha") "%s, donnees, donnees_50Hz, rms_noise, rms_noise_50Hz" (nil))
   ("RFILTER_EKH_kosma" fun nil (lib "rfilter_ekh_kosma.pro" nil "sacha") "Result = %s(BMSEP, naz, pas_az)" (nil))
   ("remove_uncordrifts" pro nil (lib "remove_uncordrifts.pro" nil "sacha") "%s" (nil ("dir_in") ("dir_rcp") ("nsubscans") ("num_scans") ("pfov") ("visu")))
   ("compute_wnoise" pro nil (lib "remove_uncordrifts.pro" nil "sacha") "%s" (nil))
   ("compute_psfs" pro nil (lib "remove_uncordrifts.pro" nil "sacha") "%s, model_r_as, model_psf" (nil ("fwhm_as_psf") ("pixsize") ("rmax_beam")))
   ("proj_rectify_indiv" pro nil (lib "remove_uncordrifts.pro" nil "sacha") "%s" (nil))
   ("proj_approx_psf" pro nil (lib "remove_uncordrifts.pro" nil "sacha") "%s" (nil))
   ("disp_ima" pro nil (lib "remove_uncordrifts.pro" nil "sacha") "%s, map" (nil ("title") ("weightmap") ("win")))
   ("chain" fun nil (lib "remove_uncordrifts.pro" nil "sacha") "Result = %s(val, ndec)" (nil))
   ("find_all_regex" fun nil (lib "remove_uncordrifts.pro" nil "sacha") "Result = %s(str, regexpr)" (nil))
   ("otherplot" pro nil (lib "remove_uncordrifts.pro" nil "sacha") "%s, x, y" (nil ("charsize") ("color") ("over") ("psym") ("title") ("xrange") ("xtitle") ("yrange") ("ytitle") ("zero")))
   ("ROT_dxdy2draddec" pro nil (lib "rot_dxdy2draddec.pro" nil "sacha") "%s, delta_x, delta_y, rot_angle, delta_alpha, delta_delta" (nil))
   ("continuous_skydip" pro nil (lib "continuous_skydip.pro" nil "sacha") "%s, skydip_number" (nil ("nopowermap")))
   ("ROT_draddec2dxdy" pro nil (lib "rot_draddec2dxdy.pro" nil "sacha") "%s, delta_alpha, delta_delta, rot_angle, delta_x, delta_y" (nil))
   ("ROT_dxdy2dazdel" pro nil (lib "rot_dxdy2dazdel.pro" nil "sacha") "%s, delta_x, delta_y, elev, delta_az, delta_el" (nil))
   ("FILTER_EKH_kosma" fun nil (lib "filter_ekh_kosma.pro" nil "sacha") "Result = %s(BMSEP, naz, pas_az)" (nil))
   ("plot_fft" pro nil (lib "plot_fft.pro" nil "sacha") "%s, donnees, mean_level, mean_level_av, rms_noise, rms_noise_av, cube_pow_spec, pow_spec_av, pow_spec_row, pow_spec_row_av" (nil))
   ("init_obs" pro nil (lib "init_obs.pro" nil "sacha") "%s, init_obs_str" (nil ("scan_number") ("type")))
   ("ROT_draddec2dazdel" pro nil (lib "rot_draddec2dazdel.pro" nil "sacha") "%s, delta_alpha, delta_delta, par_ang, delta_az, delta_el" (nil))
   ("make_model_data" fun nil (lib "make_model_data.pro" nil "sacha") "Result = %s(scan_str, model_str)" (nil ("dx_rcp") ("dy_rcp")))
   ("filter_spiral" pro nil (lib "filter_spiral_nozero.pro" nil "sacha") "%s, donnees, donnees_filtered, rms_noise, rms_noise_filtered" (nil ("spiral_freq")))
   ("sgn" fun nil (lib "sgn.pro" nil "sacha") "Result = %s(x)" (nil))
   ("traite_nodding_apex" pro nil (lib "traite_nodding_apex.pro" nil "sacha") "%s, scan_list, image, rms, cube_nodding, nodding" (nil ("decorrel") ("dir_dat") ("image_nod") ("kill50Hz") ("mean_lst") ("nopowermap") ("pwv") ("tau")))
   ("power_map" pro nil (lib "power_map2007.pro" nil "sacha") "%s, offset, bias, vl, cubein, cubeout" (nil))
   ("ROT_dazdel2dxdy" pro nil (lib "rot_dazdel2dxdy.pro" nil "sacha") "%s, delta_az, delta_el, elev, delta_x, delta_y" (nil))
   ("reduce_donneestruct" pro nil (lib "reduce_donneestruct.pro" nil "sacha") "%s, structin, npoints, structout" (nil))
   ("ROT_dazdel2draddec" pro nil (lib "rot_dazdel2draddec.pro" nil "sacha") "%s, delta_az, delta_el, par_ang, delta_alpha, delta_delta" (nil))
   ("combine_otf_map" pro nil (lib "combine_otf_map.pro" nil "sacha") "%s, scan_list, mapradecstr" (nil ("do_rcp") ("project_list") ("removedrift")))
   ("clean_chaine" fun nil (lib "read_mbfits.pro" nil "sacha") "Result = %s(chaine, car1, car2)" (nil))
   ("header2string" fun nil (lib "read_mbfits.pro" nil "sacha") "Result = %s(commande, param_liste, header)" (nil))
   ("read_mbfits" pro nil (lib "read_mbfits.pro" nil "sacha") "%s, scan_number, subscan, arraydata, header_arraydata, datapar, header_datapar, monitor, header_monitor, datatel, header_tel" (nil ("rows")))
   ("power_map" pro nil (lib "power_map.pro" nil "sacha") "%s, vhblind, bias, vl, cubein, cubeout" (nil))
   ("traite_otf_ch_map" pro nil (lib "traite_otf_ch_map.pro" nil "sacha") "%s, scan_number, cube_ch_map_str" (nil ("champ_masque") ("dir_dat") ("flat") ("newreduc") ("nopowermap") ("tau")))
   ("read_partemis" pro nil (lib "read_partemis.pro" nil "sacha") "%s, filein, header, data" (nil))
   ("filter_low" pro nil (lib "filter_low.pro" nil "sacha") "%s, donnees, donnees_filt, rms_noise, rms_noise_filt" (nil))
   ("map_make" pro nil (lib "map_make.pro" nil "sacha") "%s, mapradecstr" (nil ("carte_scan") ("champ1") ("donnees") ("error_otf_scan") ("model") ("offset_str") ("parang0") ("project_") ("removedrift") ("scan_list")))))
